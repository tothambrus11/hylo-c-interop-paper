
@online{libc,
  title   = {C standard library --- {Wikipedia}{,} The Free Encyclopedia},
  author  = {Wikipedia Contributors},
  year    = {2025},
  url     = {https://en.wikipedia.org/wiki/C_standard_library},
  urldate = {2025-06-15}
}

@online{requirements-for-cpp-successor-languages,
  title   = {Requirements for C++ Successor Languages},
  author  = {Bret Brown},
  year    = {2023},
  note    = {Presented at C++Now},
  url     = {https://www.youtube.com/watch?v=VMYVbA2gg0g},
  urldate = {2025-04-26}
}

@online{c2rust,
  title   = {C2Rust: Migrating Legacy Code to Rust},
  author  = {Per Larsen},
  year    = {2018},
  note    = {Presented at RustConf},
  url     = {https://www.youtube.com/watch?v=WEsR0Vv7jhg},
  urldate = {2025-06-20}
}

@online{corrode,
  title   = {Corrode: C to Rust Translator},
  author  = {Jamey Sharp},
  year    = {2017},
  url     = {},
  urldate = {2025-06-20}
}

@online{carbon-interop-goals,
  title   = {Interoperability Philosophy and Goals},
  author  = {Carbon Contributors},
  year    = {2023},
  url     = {https://github.com/carbon-language/carbon-lang/blob/77afd0678baae83da8610dddff286739d271e18e/docs/design/interoperability/philosophy_and_goals.md#carbon-inheritance-from-c-types},
  urldate = {2025-05-30}
}

@online{rust-macro-refolding,
  title       = {Using GPT-4 to Assist in C to Rust Translation},
  author      = {Adam Karvonen},
  institution = {Galois},
  year        = {2023},
  url         = {https://www.galois.com/articles/using-gpt-4-to-assist-in-c-to-rust-translation},
  urldate     = {2025-06-20}
}

@inproceedings{oxidize-wip,
  author    = {De Greef, Robbe and Discepoli, Attilio and Aguililla Klein, Esteban and Engels, Th\'{e}o and Hasselmann, Ken and Paolillo, Antonio},
  title     = {Towards Macro-Aware C-to-Rust Transpilation (WIP)},
  year      = {2025},
  isbn      = {9798400719219},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi-org.tudelft.idm.oclc.org/10.1145/3735452.3735535},
  doi       = {10.1145/3735452.3735535},
  abstract  = {The automatic translation of legacy C code to Rust presents significant challenges, particularly in handling preprocessor macros.   C macros introduce metaprogramming constructs that operate at the text level, outside of C's syntax tree, making their direct translation to Rust non-trivial.   Existing transpilers --- source-to-source compilers --- expand macros before translation, sacrificing their abstraction and reducing code maintainability.   In this work, we introduce Oxidize, a macro-aware C-to-Rust transpilation framework that preserves macro semantics by translating C macros into Rust-compatible constructs while selectively expanding only those that interfere with Rust's stricter semantics.  We evaluate our techniques on a small-scale study of real-world macros and find that the majority can be safely and idiomatically transpiled without full expansion.},
  booktitle = {Proceedings of the 26th ACM SIGPLAN/SIGBED International Conference on Languages, Compilers, and Tools for Embedded Systems},
  pages     = {5-61},
  numpages  = {5},
  keywords  = {Abstract Syntax Tree, C, Embedded, Macros, Metaprogramming, Preprocessor, Rust, Transpilation},
  location  = {Seoul, Republic of Korea},
  series    = {LCTES '25}
}

@inproceedings{cppsig,
  author    = {Dietrich, Christian},
  title     = {CppSig: Extracting Type Information for C-Preprocessor Macro Expansions},
  year      = {2021},
  isbn      = {9781450387071},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi-org.tudelft.idm.oclc.org/10.1145/3477113.3487268},
  doi       = {10.1145/3477113.3487268},
  abstract  = {For decades, the C programming language proved to be a cornerstone of system-software ecosystems, leaving us with billion lines of existing source code. From today's perspective of object-oriented and functional languages, C itself seems rather limited in its expressiveness and abstractive power. However, with the C preprocessor (CPP) as its companion, macros, which operate on the raw token stream, allow for abstractions that are impossible to achieve within the language itself. While its flexibility and its ease of use make CPP attractive for programmers, its potential undisciplined usage makes it problematic for static source-code analysis and can slow down the on-boarding of new developers.In this paper, we focus on a disciplined subclass of CPP macros: the statement-like and expression-like macros, which mimic regular C functions, with well-type C expressions as arguments and, in case, a return value. We show how to spot such macros and their arguments in the compiler's abstract syntax tree, whereby it becomes possible to deduct type signatures for individual macro expansions. With our CppSig prototype, implemented as a Clang plugin, we extract macro-type information from Linux 5.12, whereby it becomes easier to understand even deep macro-expansion nests. In the future, these expansion signatures could be used to statically enforce gradually-typed CPP macro definitions.},
  booktitle = {Proceedings of the 11th Workshop on Programming Languages and Operating Systems},
  pages     = {62-68},
  numpages  = {7},
  location  = {Virtual Event, Germany},
  series    = {PLOS '21}
}

@online{swift-cpp-post-hoc-conformance,
  title   = {Mixing Swift and C++: Conforming C++ Type to Swift Protocol},
  author  = {Apple Inc.},
  year    = {2025},
  url     = {https://www.swift.org/documentation/cxx-interop/#conforming-c-type-to-swift-protocol},
  urldate = {2025-05-30}
}

@online{hylo-lang,
  title   = {The Hylo Programming Language},
  author  = {Hylo Contributors},
  year    = {2022},
  url     = {https://hylo-lang.org/},
  urldate = {2025-05-30}
}

@online{vla-reddit,
  title   = {Are variable length arrays bad? When or when not should I use them?},
  author  = {Tstanisl},
  year    = {2022},
  url     = {https://www.reddit.com/r/C_Programming/comments/yigtue/are_variable_length_arrays_bad_when_or_when_not/},
  urldate = {2025-06-20}
}

@online{carrays,
  title   = {Array Declaration - cppreference.com},
  author  = {C++ Reference Contributors},
  year    = {2025},
  url     = {https://cppreference.com/w/c/language/array.html},
  urldate = {2025-06-20}
}

@online{rust-variadic-ffi,
  title   = {Variadic Functions - FFI - The Rustonomicon},
  author  = {Rust Contributors},
  year    = {2025},
  url     = {https://doc.rust-lang.org/nomicon/ffi.html#variadic-functions},
  urldate = {2025-06-20}
}

@online{swift-variadic-ffi,
  title   = {Use a CVaListPointer to Call Variadic Functions - Apple Developer Documentation},
  author  = {Apple Inc.},
  year    = {2025},
  url     = {https://developer.apple.com/documentation/swift/using-imported-c-functions-in-swift#Use-a-CVaListPointer-to-Call-Variadic-Functions},
  urldate = {2025-06-20}
}
@online{wrapping-valist,
  title   = {},
  author  = {},
  year    = {2022},
  url     = {https://bumbershootsoft.wordpress.com/2022/07/24/custom-printf-wrapping-variadic-functions-in-c/},
  urldate = {2025-06-20}
}

@techreport{P3477R1,
  author      = {JF Bastien},
  title       = {There are exactly 8 bits in a byte},
  institution = {ISO/IEC JTC1/SC22/WG21},
  number      = {P3477R1},
  year        = {2024},
  url         = {https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p3477r1.html},
  note        = {C++ Standard Proposal}
}

@online{zenon-lang,
  author  = {Brzozowski, Michal},
  title   = {Zenon language},
  url     = {https://github.com/miki151/zenon},
  urldate = {2025-06-13}
}

@online{zngur,
  author  = {Kalbasi, Hamidreza},
  title   = {Zngur: A C++/Rust interop tool},
  url     = {https://hkalbasi.github.io/zngur/},
  year    = {2023},
  urldate = {2025-06-13}
}

@online{rust-bindgen,
  author  = {Rust Bindgen Contributors},
  title   = {Bindgen},
  url     = {https://github.com/rust-lang/rust-bindgen},
  urldate = {2025-06-13}
}
@online{cbindgen,
  author  = {Mozilla and cbindgen Contributors},
  title   = {cbindgen},
  url     = {https://github.com/rust-lang/cbindgen},
  urldate = {2025-06-13}
}

@online{cognitive-biases,
  author  = {{Wikipedia Contributors}},
  title   = {List of cognitive biases --- {Wikipedia}{,} The Free Encyclopedia},
  year    = {2025},
  url     = {https://en.wikipedia.org/w/index.php?title=List_of_cognitive_biases&oldid=1295239340},
  urldate = {2025-06-13}
}

@book{Ahrens2017SmartNotes,
  author    = {Ahrens, SÃ¶nke},
  title     = {How to Take Smart Notes: One Simple Technique to Boost Writing, Learning and Thinking - for Students, Academics and Nonfiction Book Writers},
  year      = {2017},
  publisher = {CreateSpace Independent Publishing Platform },
  address   = {North Charleston}
}

@online{OptionSet,
  author  = {{Apple Inc.}},
  title   = {OptionSet Protocol},
  url     = {https://developer.apple.com/documentation/swift/optionset},
  urldate = {2025-06-15}
}

@online{rust-c-layouting,
  author  = {{Rust Contributors}},
  title   = {Type Layout - The C Representation},
  url     = {https://doc.rust-lang.org/beta/reference/type-layout.html#r-layout.repr.c.struct},
  urldate = {2025-06-16}
}

@online{how-swift-imports-c-structs,
  author  = {{Apple Inc.}},
  title   = {How Swift Imports C APIs - Structs},
  url     = {https://github.com/swiftlang/swift/blob/main/docs/HowSwiftImportsCAPIs.md#structs},
  urldate = {2025-06-16}
}

@online{swift-builtin-mapped-types,
  author  = {{Apple Inc.}},
  title   = {BuiltinMappedTypes.def},
  year    = {2024},
  url     = {https://github.com/swiftlang/swift/blob/3d9e49038b6ef568e79841ec1528cdbda420cc8c/include/swift/ClangImporter/BuiltinMappedTypes.def},
  urldate = {2025-06-18}
}

@online{rust-ffi-primitives,
  author  = {{Rust Contributors}},
  title   = {Rust Core FFI Primitives},
  year    = {2025},
  url     = {https://github.com/rust-lang/rust/blob/1bb335244c311a07cee165c28c553c869e6f64a9/library/core/src/ffi/primitives.rs},
  urldate = {2025-06-18}
}
@online{muon-ffi-mapping,
  author  = {{Nick Matthijssen}},
  title   = {Muon's FFI Generate Pass - Primitive Types},
  year    = {2022},
  url     = {https://github.com/nickmqb/muon/blob/10781443d11fc49e4e5a32550c012407e7d714cf/ffigen/src/generate_pass.mu#L90},
  urldate = {2025-06-18}
}

@online{zig-ffi-primitives,
  author  = {{Zig Contributors}},
  title   = {Primitive Types - Zig Documentation},
  url     = {https://ziglang.org/documentation/0.14.1/#toc-Primitive-Types},
  urldate = {2025-06-18}
}

@online{how-swift-imports-c-fundamental-types,
  author  = {{Apple Inc.}},
  title   = {How Swift Imports C APIs - Fundamental Types},
  url     = {https://github.com/swiftlang/swift/blob/main/docs/HowSwiftImportsCAPIs.md#fundamental-types},
  urldate = {2025-06-18}
}
@online{how-swift-imports-c-nullable,
  author  = {{Apple Inc.}},
  title   = {How Swift Imports C APIs - Nullable and non-nullable pointers},
  url     = {https://github.com/swiftlang/swift/blob/main/docs/HowSwiftImportsCAPIs.md#nullable-and-non-nullable-pointers},
  urldate = {2025-06-16}
}

@online{hylo-function-pointers,
  author  = {{Ambrus TÃ³th}},
  title   = {Function, Function Pointer, Closure and C Function Pointer Interop in Hylo},
  url     = {https://github.com/orgs/hylo-lang/discussions/1705},
  urldate = {2025-06-16}
}

@article{usage-of-macros-study,
  title     = {An empirical analysis of c preprocessor use},
  volume    = {28},
  doi       = {10.1109/tse.2002.1158288},
  number    = {12},
  journal   = {IEEE Transactions on Software Engineering},
  publisher = {Institute of Electrical and Electronics Engineers (IEEE)},
  author    = {Ernst, M.D. and Badros, G.J. and Notkin, D.},
  year      = {2002},
  month     = dec.,
  pages     = {1146-1170}
}

@techreport{c23-struct-and-union-specifiers,
  author      = {{International Organization for Standardization}},
  title       = {Information technology -- Programming languages -- C},
  institution = {ISO/IEC},
  year        = {2024},
  number      = {ISO/IEC 9899:2024(E)},
  type        = {Standard},
  note        = {Section 6.7.3.2, "Structure and union specifiers"}
}

@online{fam-wiki,
  author = {{Wikipedia contributors}},
  title  = {Flexible array member --- {Wikipedia}{,} The Free Encyclopedia},
  year   = {2025},
  url    = {https://en.wikipedia.org/w/index.php?title=Flexible_array_member&oldid=1292204670},
  note   = {[Online; accessed 16-June-2025]}
}

@online{zig-qualifiers,
  author  = {{Zig Contributors}},
  title   = {},
  year    = {2025},
  url     = {https://github.com/ziglang/zig/issues/23329},
  urldate = {2025-06-16}
}

@online{shared-mutable-state,
  author  = {{Matthieu Cneude}},
  title   = {},
  year    = {2019},
  url     = {https://thevaluable.dev/global-variable-explained/},
  urldate = {2025-06-18}
}

@online{rust-embedded-pain,
  author  = {{Rust Embedded Devices Working Group}},
  title   = {Not Yet Awesome Embedded Rust: Sharing Data with Interrupts},
  year    = {2024},
  url     = {https://github.com/rust-embedded/not-yet-awesome-embedded-rust#sharing-data-with-interrupts},
  urldate = {2025-06-18}
}

@online{zig-add-cchar,
  author  = {{Zig Contributors}},
  title   = {Add c\_char type - Issue 875 - Zig Language},
  year    = {2018},
  url     = {https://github.com/ziglang/zig/issues/875},
  urldate = {2025-06-18}
}

@online{hackernews-rust-cheri,
  author  = {{HackerNews Users}},
  title   = {On Beej's Guide to C Programming},
  year    = {2023},
  url     = {https://news.ycombinator.com/item?id=34950530#:~:text=sizeof(size_t)%20%3D%3D%20sizeof(intptr_t)},
  urldate = {2025-06-18},
  note    = {Forum discussion}
}

@online{arch16-bit,
  author  = {{Alex Martelli}},
  title   = {size\_t vs. uintptr\_t - Stack Overflow},
  year    = {2009},
  url     = {https://en.wikipedia.org/w/index.php?title=16-bit_computing&oldid=1295239340},
  urldate = {2025-06-18}
}

@online{weird-precision-support,
  author  = {{Alex Martelli}},
  title   = {Half \& Quad Precision Floating Point Support},
  year    = {2025},
  month   = {4},
  url     = {https://hackmd.io/@8W5l8q6-Qyyn_vKh2-L0RQ/rJpZsmcdh},
  urldate = {2025-06-18}
}

@article{ieee754,
  author  = {},
  journal = {IEEE Std 754-2019 (Revision of IEEE 754-2008)},
  title   = {IEEE Standard for Floating-Point Arithmetic},
  year    = {2019},
  volume  = {},
  number  = {},
  pages   = {1-84},
  doi     = {10.1109/IEEESTD.2019.8766229}
}

@online{llvm-float-support,
  author = {{LLVM Contributors}},
  title  = {Floating Point Types - LLVM Language Reference Manual},
  year   = {2025},
  url    = {https://llvm.org/docs/LangRef.html#floating-point-types}
}
@online{tinycgo,
  author = {{TinyGo Contributors}},
  title  = {LibClang Parser in TinyGo CGO},
  year   = {2025},
  url    = {https://github.com/tinygo-org/tinygo/blob/release/cgo/libclang.go#L744}
}

@online{no-support-llvm-decimals,
  author = {{LLVM Contributors}},
  title  = {GCC Extensions not implemented yet - LLVM Language Reference Manual},
  year   = {2025},
  url    = {https://clang.llvm.org/docs/UsersManual.html#:~:text=clang%20does%20not%20support%20decimal%20floating%20point%20types}
}


@online{longdouble-wiki,
  author = {{Wikipedia contributors}},
  title  = {Long double --- {Wikipedia}{,} The Free Encyclopedia},
  year   = {2025},
  url    = {https://en.wikipedia.org/w/index.php?title=Long_double&oldid=1279938517},
  note   = {[Online; accessed 18-June-2025]}
}

@online{bindgen-nocopy,
  author  = {{Bindgen Contributors}},
  title   = {Preventing the Derivation of Copy and Clone},
  year    = {2025},
  url     = {https://rust-lang.github.io/rust-bindgen/nocopy.html},
  urldate = {2025-06-19}
}

@online{hylo-trait-ptr-conformance-warning,
  author  = {{Ambrus TÃ³th}},
  title   = {Proposal: Warning for Default Trait Implementations on Structs with Pointers \#1711},
  year    = {2025},
  url     = {https://github.com/orgs/hylo-lang/discussions/1711},
  urldate = {2025-06-19}
}
@online{bindgen-cmacro-rs,
  author  = {Markus Reiter},
  title   = {Support complex macros. \#2369 - Rust Bindgen},
  year    = {2024},
  url     = {https://github.com/rust-lang/rust-bindgen/pull/2369},
  urldate = {2025-06-19}
}

@online{cmacro-rs,
  author  = {Markus Reiter},
  title   = {cmacro-rs: A C macro parser, evaluator and code generator},
  year    = {2024},
  url     = {https://github.com/reitermarkus/cmacro-rs},
  urldate = {2025-06-19}
}
@online{bindgen-inline-proposal,
  author  = {Ambrus TÃ³th},
  title   = {Comment on feature request for a flag for wrapping inline functions \#3060},
  year    = {2025},
  url     = {https://github.com/rust-lang/rust-bindgen/issues/3060#issuecomment-2993451966},
  urldate = {2025-06-21}
}
@online{bindgen-inline-limitation,
  author  = {Rust Bindgen Contributors},
  title   = {Why isn't bindgen generating bindings to inline functions? - FAQ - The Bindgen User Guide},
  year    = {2025},
  url     = {https://web.archive.org/web/20250621101712/https://rust-lang.github.io/rust-bindgen/faq.html#why-isnt-bindgen-generating-bindings-to-inline-functions},
  urldate = {2025-06-21}
}
@online{hylo-c-mappings-and-c-integers,
  author  = {Ambrus TÃ³th},
  title   = {Distinct Standard C Integer Types for Hylo and Mapping Examples \#1712},
  year    = {2025},
  month   = {06},
  url     = {https://github.com/hylo-lang/hylo/pull/1712},
  urldate = {2025-06-21}
}
@online{hylo-union-mapping,
  author  = {Ambrus TÃ³th},
  title   = {An example mapping of a C union to Hylo},
  year    = {2025},
  month   = {06},
  url     = {https://gist.github.com/tothambrus11/fc8d9385ddcb3593f22b1e9ecce5f3b2},
  urldate = {2025-06-21}
}

@online{hylo-fam-mapping,
  author  = {Ambrus TÃ³th},
  title   = {Mapping of flexible array members to Hylo},
  year    = {2025},
  month   = {06},
  url     = {https://gist.github.com/tothambrus11/84b2e44bfa5a1453698505c451a3ef65},
  urldate = {2025-06-21}
}

@online{hylo-bit-field-mapping,
  author  = {Ambrus TÃ³th},
  title   = {Mapping of C bit-fields to Hylo},
  year    = {2025},
  month   = {06},
  url     = {TODO},
  urldate = {2025-06-21}
}


@book{eop,
  author  = {Stepanov, Alexander and McJones, Paul},
  year    = {2019},
  pages   = {6},
  title   = {Elements of Programming},
  isbn    = {978-0-578-22214-1},
  chapter = {1}
}

@inproceedings{sharedmut,
  author    = {Marsavina, Cosmin},
  booktitle = {2020 IEEE 14th International Symposium on Applied Computational Intelligence and Informatics (SACI)},
  title     = {Understanding the Impact of Mutable Global State on the Defect Proneness of Object-Oriented Systems},
  year      = {2020},
  volume    = {},
  number    = {},
  pages     = {000105-000110},
  keywords  = {Industries;Codes;Correlation;Semantics;Production;Software quality;Software systems;mutable global state;defect proneness;object-oriented systems},
  doi       = {10.1109/SACI49304.2020.9118816}
}

@techreport{cheri-intro,
  author      = {{Robert N. M. Watson, Simon W. Moore, Peter Sewell, Peter G. Neumann}},
  title       = {An Introduction to CHERI},
  institution = {University of Cambridge Computer Laboratory},
  year        = {2019},
  number      = {941},
  type        = {Technical Report},
  note        = {Section 2.1, "A Portable Architectural Protection Model"}
}

@inproceedings{Pappas_2024,
  series     = {ICSE '24},
  title      = {Semantic Analysis of Macro Usage for Portability},
  url        = {http://dx.doi.org/10.1145/3597503.3623323},
  doi        = {10.1145/3597503.3623323},
  booktitle  = {Proceedings of the IEEE/ACM 46th International Conference on Software Engineering},
  publisher  = {ACM},
  author     = {Pappas, Brent and Gazzillo, Paul},
  year       = {2024},
  month      = feb,
  pages      = {1-12},
  collection = {ICSE '24}
}

